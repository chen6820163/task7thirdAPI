<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <!--
        applicationContext-dao 主要整合mybatis 不包括事务
        为了后期维护也是为了单一职能原则
        什么时候用注解
        什么时候用xml配置
         如果是自己写的代码就使用注解
         如果是配置第三方jar包，那么就需要xml配置
     -->

    <!-- 导入外部配置的数据库连接信息  ,classpath:redis.properties-->
    <context:property-placeholder location="classpath:datasource.properties,classpath:redis.properties,classpath:application.properties" ignore-unresolvable="true" />

    <context:component-scan base-package="com.jnshu.task4.common.bean"/>
    <!--<bean id="SendCloudBean" class="com.jnshu.task4.common.bean.SendCloudBean"/>-->
    <!--
        druidDataSource
        配置连接数据库的信息
        连接数据库的url
        连接数据库的usernmae
        连接数据库的pasword
        连接数据库的driver
     -->
    <bean name="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!-- 通过set方法注入值 -->
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!--
        sqlSessionFactoryBean
        配置mybatis的一些相关信息
        比如说：
            mybatis操作数据库的信息
            mybatis的映射文件
            mybatis分页信息
            mybatis起别名
     -->
    <bean name="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- set方法注入 -->
        <property name="dataSource" ref="druidDataSource"></property>
        <!-- 映射文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
        <!--&lt;!&ndash; mybatis分页插件 pagehelper &ndash;&gt;-->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <!-- config params as the following -->
                        <value>
                            helperDialect=mysql
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>
   

    <!--
        mapperScannerConfigurer
         映射扫描接口
         是为了告诉spring容器mybatis的映射接口在什么包底下
         然后spring容器才能给映射接口动态的产生一个代理实现类
     -->
    <bean name="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.jnshu.task4.dao"></property>
    </bean>

    <!--
		applicationContext-service.xml
		1.扫描service层底下所有的注解
		2.方便后期业务扩展
	 -->
    <context:component-scan base-package="com.jnshu.task4.service.impl"></context:component-scan>

    <!-- redis连接池配置-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig" >
        <!--最大空闲数-->
        <property name="maxIdle" value="${redis.maxIdle}" />
        <!--连接池的最大数据库连接数  -->
        <property name="maxTotal" value="${redis.maxTotal}" />
        <!--最大建立连接等待时间-->
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
        <!--逐出连接的最小空闲时间 默认1800000毫秒(30分钟)-->
        <property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" />
        <!--每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3-->
        <property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}" />
        <!--逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1-->
        <property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" />
        <!--是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个-->
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
        <!--在空闲时检查有效性, 默认false  -->
        <property name="testWhileIdle" value="${redis.testWhileIdle}" />
    </bean >
    <!--session共享-->
    <bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration"/>
    <!--redis连接工厂 -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">
        <property name="poolConfig" ref="jedisPoolConfig"></property>
        <!--IP地址 -->
        <property name="hostName" value="${redis.hostName}"></property>
        <!--端口号  -->
        <property name="port" value="${redis.port}"></property>
        <!--如果Redis设置有密码,没有的话就注释掉下面的配置 ${redis.password} -->
        <property name="password" value="Chen6820163*" />
        <!--客户端超时时间单位是毫秒  -->
        <property name="timeout" value="${redis.timeout}"></property>
    </bean>

    <!--redis操作模版,使用该对象可以操作redis  -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        <!--如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！  -->
        <property name="keySerializer" >
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer" >
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
        </property>
        <!--开启事务  -->
        <property name="enableTransactionSupport" value="true"></property>
    </bean >

    <!--自定义redis工具类,在需要缓存的地方注入此类  -->
    <bean id="redisUtil" class="com.jnshu.task4.common.utils.RedisUtil">
        <property name="redisTemplate" ref="redisTemplate" />
    </bean>
</beans>